// Script de test pour v√©rifier la configuration Supabase
// Usage: node scripts/test-supabase.js

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

console.log('üß™ Test de Configuration Supabase\n');

// V√©rification des variables d'environnement
console.log('üìã V√©rification des variables d\'environnement:');
console.log(`URL: ${supabaseUrl ? '‚úÖ D√©finie' : '‚ùå Manquante'}`);
console.log(`Cl√©: ${supabaseKey ? '‚úÖ D√©finie' : '‚ùå Manquante'}`);

if (!supabaseUrl || !supabaseKey) {
  console.log('\n‚ùå Configuration incompl√®te. V√©rifiez votre fichier .env.local');
  process.exit(1);
}

// Test de connexion
async function testConnection() {
  try {
    console.log('\nüîå Test de connexion...');
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // Test simple : r√©cup√©rer les marques
    const { data, error } = await supabase
      .from('brands')
      .select('*')
      .limit(1);
    
    if (error) {
      console.log('‚ùå Erreur de connexion:', error.message);
      return false;
    }
    
    console.log('‚úÖ Connexion r√©ussie !');
    console.log(`üìä Donn√©es r√©cup√©r√©es: ${data ? data.length : 0} marque(s)`);
    return true;
  } catch (error) {
    console.log('‚ùå Erreur:', error.message);
    return false;
  }
}

// Test des tables
async function testTables() {
  try {
    console.log('\nüìã Test des tables...');
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    const tables = [
      { name: 'brands', label: 'Marques' },
      { name: 'models', label: 'Mod√®les' },
      { name: 'vehicles', label: 'V√©hicules' },
      { name: 'equipments', label: '√âquipements' }
    ];
    
    for (const table of tables) {
      const { data, error } = await supabase
        .from(table.name)
        .select('id')
        .limit(1);
      
      if (error) {
        console.log(`‚ùå ${table.label}: ${error.message}`);
      } else {
        console.log(`‚úÖ ${table.label}: Table accessible`);
      }
    }
  } catch (error) {
    console.log('‚ùå Erreur lors du test des tables:', error.message);
  }
}

// Test des donn√©es
async function testData() {
  try {
    console.log('\nüìä Test des donn√©es...');
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // Compter les enregistrements
    const counts = {};
    const tables = ['brands', 'models', 'vehicles', 'equipments'];
    
    for (const table of tables) {
      const { count, error } = await supabase
        .from(table)
        .select('*', { count: 'exact', head: true });
      
      if (!error) {
        counts[table] = count;
      }
    }
    
    console.log('üìà Nombre d\'enregistrements:');
    console.log(`   Marques: ${counts.brands || 0}`);
    console.log(`   Mod√®les: ${counts.models || 0}`);
    console.log(`   V√©hicules: ${counts.vehicles || 0}`);
    console.log(`   √âquipements: ${counts.equipments || 0}`);
    
    // V√©rifier qu'on a les donn√©es de base
    if (counts.brands >= 3 && counts.vehicles >= 4) {
      console.log('‚úÖ Donn√©es de d√©monstration pr√©sentes');
    } else {
      console.log('‚ö†Ô∏è  Donn√©es de d√©monstration incompl√®tes');
      console.log('   Ex√©cutez le script seed.sql dans Supabase SQL Editor');
    }
    
  } catch (error) {
    console.log('‚ùå Erreur lors du test des donn√©es:', error.message);
  }
}

// Test d'une requ√™te complexe
async function testComplexQuery() {
  try {
    console.log('\nüîç Test de requ√™te complexe...');
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    const { data, error } = await supabase
      .from('vehicles')
      .select(`
        *,
        brand:brands(nom),
        model:models(nom)
      `)
      .limit(1);
    
    if (error) {
      console.log('‚ùå Erreur requ√™te complexe:', error.message);
    } else if (data && data.length > 0) {
      console.log('‚úÖ Requ√™te complexe r√©ussie');
      console.log(`   Exemple: ${data[0].brand?.nom} ${data[0].model?.nom} ${data[0].annee}`);
    } else {
      console.log('‚ö†Ô∏è  Aucune donn√©e retourn√©e');
    }
  } catch (error) {
    console.log('‚ùå Erreur:', error.message);
  }
}

// Ex√©cution des tests
async function runTests() {
  const connected = await testConnection();
  
  if (connected) {
    await testTables();
    await testData();
    await testComplexQuery();
    
    console.log('\nüéâ Tests termin√©s !');
    console.log('\nüìù Prochaines √©tapes:');
    console.log('1. Si tous les tests sont ‚úÖ, d√©commentez NEXT_PUBLIC_USE_SUPABASE=true dans .env.local');
    console.log('2. Red√©marrez votre serveur de d√©veloppement');
    console.log('3. Testez les APIs avec: npm run test:api');
  } else {
    console.log('\n‚ùå √âchec de la connexion. V√©rifiez:');
    console.log('1. Vos cl√©s Supabase dans .env.local');
    console.log('2. Que le projet Supabase est actif');
    console.log('3. Que les scripts schema.sql et seed.sql ont √©t√© ex√©cut√©s');
  }
}

runTests();
